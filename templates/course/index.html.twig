{% extends 'base.html.twig' %}

{% block title %}Hello CourseController!{% endblock %}

{% block body %}

{% for message in app.flashes('success') %}
    <div class="flash-message flash-success">
        {{ message }}
    </div>
{% endfor %}
{% for message in app.flashes('danger') %}
    <div class="flash-message flash-danger">
        {{ message }}
    </div>
{% endfor %}

<div id="course-container">
    <h1>Votre course</h1>
    
    <div class="course_div">
        <div id="panier">
            <h3>Panier</h3>
            <div id="panier_info">
                {% if prix %}
                    <p>total de la course: {{ prix }}</p>
                {% else %}
                <p>erreur</p>
                {% endif %}
            </div>
        </div>
        <div id="course_form">
            {{ form_start(courseForm, {'action': path('app_new_course'), 'method': 'POST'}) }}
            {{ form_widget(courseForm._token)}}
            <input type="hidden" id="startLat" name="startLat">
            <input type="hidden" id="startLng" name="startLng">
            <input type="hidden" id="endLat" name="endLat">
            <input type="hidden" id="endLng" name="endLng">
            <input type="hidden" id="clientTarif" name="clientTarif">
            <input type="hidden" id="clientDuration" name="clientDuration">
            <input type="hidden" id="clientDistance" name="clientDistance">
            
            <div class="form-group">
                {% if startAddress %}
                {{ form_widget(courseForm.adresseDepart, {'attr': { 'value': startAddress, 'readonly':true, 'id':'test-id', }}) }}
                {% else %}
                    {{ form_row(courseForm.adresseDepart) }}
                {% endif %} 
            </div>
            <div class="form-group">
                {% if endAddress %}   
                {{ form_row(courseForm.adresseArivee, {'attr': { 'readonly':true, 'value': endAddress }}) }}
                {% else %}
                {{ form_row(courseForm.adresseArivee) }}
                 {% endif %} 
            </div>
            <div class="form-group">
                {{ form_row(courseForm.dateDepart, {'attr': { 'data-custom-id': 'dateDepart' }}) }}
            </div>
            <div class="form-group">
                {{ form_row(courseForm.vehicule, {'attr': { 'data-custom-id': 'vehicule' }}) }}
            </div>
            <div class="form-group">
                {{ form_row(courseForm.nbPassager, {'attr': { 'data-custom-id': 'nbPassager' }}) }}
            </div>
            
            <div class="form-group">
                <select name="chauffeur" id="chauffeurSelect">
                    <option value="" selected disabled>Choisissez le chauffeur</option>
                </select>
            </div>
            

            <div class="form-group">
                {{ form_row(courseForm.valider,{'attr': { 'id': 'valider', 'class': 'btn' }}) }}
            </div>
           
            {{ form_errors(courseForm)}}
            
            {{ form_end(courseForm, {'render_rest': false}) }}
        </div>
    </div>
</div>




{% endblock %}
{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const vehiculeSelect = document.querySelector('[data-custom-id="vehicule"]');
            const nbPassagerSelect = document.querySelector('[data-custom-id="nbPassager"]');
            const dateDepartInput = document.querySelector('[data-custom-id="dateDepart"]');
            const chauffeurSelect = document.getElementById('chauffeurSelect');
    
            vehiculeSelect.addEventListener('change', function () {
                const selectedVehicule = vehiculeSelect.value;

                fetch('{{ path("app_fetch_chauffeurs") }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRF-TOKEN': '{{ csrf_token("fetch_chauffeurs") }}',
                    },
                    body: JSON.stringify({ vehicule: selectedVehicule })
                })
                .then(response => response.json())
                .then(data => {
                 const chauffeurs = data.chauffeurs;  
                    chauffeurSelect.innerHTML = '<option value="" selected disabled>Choisissez le chauffeur</option>';
                    if (Array.isArray(chauffeurs)) {
                        chauffeurs.forEach(chauffeur => {
                            const option = document.createElement('option');
                            option.value = chauffeur.id;
                            option.textContent = `${chauffeur.nom} ${chauffeur.prenom}`;
                            chauffeurSelect.appendChild(option);
                        });
                    }
                })
                .catch(error => {console.error('Erreur lors de la récupération des chauffeurs :', error);
                });
            });

            // Options pour le nombre de passagers en fonction du véhicule sélectionné
            const passagerOptions = {
                'Van': [1, 2, 3, 4, 5, 6, 7], // Nombre de places disponibles pour un Van
                'Berline': [1, 2, 3, 4], // Nombre de places disponibles pour une Berline
                'default': [1, 2, 3, 4, 5, 6, 7] // Cas par défaut si aucun véhicule n'est sélectionné
            };

            // Vérifier si le champ de sélection du véhicule existe avant d'ajouter un écouteur d'événement
            if (vehiculeSelect) {
                vehiculeSelect.addEventListener('change', function() {
                    const vehicule = vehiculeSelect.value;
                    // Vider les options actuelles du champ de sélection des passagers
                    nbPassagerSelect.innerHTML = '';
                    // Choisir les options de passagers en fonction du véhicule sélectionné
                    const options = passagerOptions[vehicule] || passagerOptions['default'];
                    // Remplir le sélecteur avec les nouvelles options
                    options.forEach(function(option) {
                        const opt = document.createElement('option');
                        opt.value = option;
                        opt.textContent = option;
                        nbPassagerSelect.appendChild(opt);
                    });
                });
                if(dateDepartInput){
                    const today= new Date();
                    // Définir la date minimale pour la date de départ : la date du jour + 1 jour, toISOString() convertit la date en chaîne de caractères au format ISO 8601
                    // split('T')[0] permet de sélectionner la partie de la date (année, mois, jour) en supprimant la partie de l'heure
                    // T dans le split permet de séparer la date de l'heure
                    const minDate = new Date(today.setDate(today.getDate() + 1)).toISOString().split('T')[0];
                    dateDepartInput.setAttribute('min', minDate);
                }
            }
        });    
    </script>
{% endblock  %}