{% extends 'base.html.twig' %}

{% block title %}Profile de {{ chauffeur.nom }} {{ chauffeur.prenom }}{% endblock %}

{% block body %}
    

    {% for message in app.flashes('success') %}
        <div class="flash-message flash-success">
            {{ message }}
        </div>
    {% endfor %}
    {% for message in app.flashes('danger') %}
        <div class="flash-message flash-danger">
            {{ message }}
        </div>
    {% endfor %}
<div class="chauffeur-profile-container">
	<h2>Bienvenue,{% if chauffeur.sexe == 'Masculin' %}M. {{ chauffeur.nom }} {{ chauffeur.prenom }}{% else %}Mme {{ chauffeur.nom }} {{ chauffeur.prenom }}{% endif %}</h2>

	<div class="chauffeur-profile-card">

		<div class="chauffeur-profile-card-img">
			<img id="profileImagePreview" src="{{ chauffeur.image ? asset('uploads/profilePics/' ~ chauffeur.image) : asset('images/default-avatar-icon-of-social-media-user-vector.jpg') }}" alt="Photo de {{ chauffeur.nom }} {{ chauffeur.prenom }}">
			<form action="{{ path('app_chauffeur_profile_edit_picture', {'id': chauffeur.id }) }}" id="profileImageForm" method="post" enctype="multipart/form-data">
				<input type="hidden" name="_csrf_token" value="{{ csrf_token('profile_image_change') }}">
				<input type="file" accept="image/*" id="profileImage" name="profileImage" class="form-control" onchange="previewImage(event)" style="display: none;">
			</form>
            <div class="change-image-container-btn">
                <button class="btn" id="changeImageBtn" onclick="triggerImageSelection()">Changer l'image du Profile</button>
                <button class="btn danger" id="cancelChangeBtn" style="display: none;" onclick="cancelImageSelection()">Annuler</button>
                <button class="btn" id="chooseAnotherBtn" style="display: none;" onclick="triggerImageSelection()">Choisir une autre image</button>
            </div>
		</div>
        
        <div id="societe">
            <h3>Societe</h3>
            <div id="societeImage">
                <img src="{{ chauffeur.societe.image ? asset('uploads/societePics/' ~ chauffeur.societe.image) : asset('images/default-avatar-icon-of-social-media-user-vector.jpg') }}" alt="Photo de {{ chauffeur.societe.nom }}">
            </div>
            <h4>{{ chauffeur.societe.nom }}</h4>
            <p>{{ chauffeur.societe.adresse }}</p>
            <p>{{ chauffeur.societe.telephone }}</p>
            <p>{{ chauffeur.societe.email }}</p>
        </div>

		<div class="chauffeur-info-container">
            <h3>Informations Personnelles</h3>
                <div class="chauffeur-details">
                    <p>Nom: <span id="nom">{{ chauffeur.nom }}</span></p>
                    <p>Prenom: <span id="prenom">{{ chauffeur.prenom }}</span></p>
                    <p>Email: <span id="email">{{ chauffeur.email }}</span></p>
                    <p>Date de Naissance: <span id="dateNaissance">{{ chauffeur.dateNaissance|date('d/m/Y') }}</span></p>
                    <p>Sexe: <span id="sexe">{{ chauffeur.sexe }}</span></p>
                </div>

                <div id="profile-details">
                    <button id="modifier-btn" class="btn" onclick="editProfileInfo()">Modifier les infos</button>
                </div>
            </div>

            
        </div>
        
            <div class="chauffeur-actions">
                <button id="showCalendar" class="btn">Ouvrir le calendrier</button>
                <form action="{{ path('app_chauffeur_profile_delete', {'id': chauffeur.id}) }}" method="post">
                    <input type="hidden" name="_csrf_token" value="{{ csrf_token('profile_delete') }}">
                    <button type="submit" class="btn danger" onclick='return confirm("Etes vous sur de voulour supprimer le chauffeur {{ chauffeur.nom }} {{ chauffeur.prenom }} ?")'>Supprimer le profile du chauffeur</button>
                </form>
            </div>
    </div>
    
    <div id="popup_modal" style="display: none;" class="modal">
        <div class="modal-content calendar-modal">
            <span class="close-btn" id="close-btn">×</span>
            <div id="planning">
                <h2>Planning</h2>
                <div id="calendar-holder" ></div>

                <div class="calendar-buttons">
                    <button id="add-event-btn" class="btn success" onclick="toggleAddEvent()">Ajouter une date</button>
                    <button id="edit-event-btn" class="btn attention" onclick="toggleEditEvent(event)">Modifier une date</button>
                    <button id="delete-event-btn" class="btn danger" onclick="toggleDeleteEvent()">Supprimer une date</button>
                </div>
                <div class="modal-form" id="modal-form" style="display: none;">
                    <div id="AddEventPlanning" style="display: none;">
                        {{ form_start(addForm, {'method': 'post', 'action': path('fc_add_event')}) }}
                        <input type="hidden" name="chauffeur_id", value="{{ chauffeur.id }}">
                        <div class="form-group">
                            {{form_row(addForm.titre)}}
                        </div>
                        <div class="form-group">
                            {{form_row(addForm.debut)}}
                        </div>
                        <div class="form-group">
                            {{form_row(addForm.fin)}}
                        </div>
                        <div class="form-group">
                            {{form_row(addForm.valider)}}
                        </div>
                        {{ form_widget(addForm._token) }}
                        {{form_end(addForm, {'render_rest': false})}}
                    </div> 
                
                    <div id="EditEventPlanning" style="display: none;">
                        {{ form_start(editForm, {'method': 'post', 'action': path('fc_edit_event')}) }}
                        <input type="hidden" name="chauffeur_id" id="id" value="{{ chauffeur.id }}">
                        {{ form_widget(editForm._token) }}
                    
                        <div class="form-group">
                            <label for="eventId">Sélectionnez un événement</label>
                            <select name="eventId" id="eventId" class="form-control">
                                {% for event in events %}
                                <option value="{{ event.id }}">{{ event.titre }}</option>
                                {% endfor %}
                            </select>
                        </div>
                
                        <div class="form-group">
                            {{ form_row(editForm.titre) }}
                        </div>
                        <div class="form-group">
                            {{ form_row(editForm.debut) }}
                        </div>
                        <div class="form-group">
                            {{ form_row(editForm.fin) }}
                        </div>
                        <div class="form-group">
                            {{ form_row(editForm.valider) }}
                        </div>
                        {{ form_end(editForm, {'render_rest': false}) }}
                    </div>
                
                    <div id="deleteEventPlanning" style="display: none;">
                        {{ form_start(deleteForm, {'method': 'post', 'action': path('fc_delete_event')}) }}
                        <input type="hidden" name="chauffeur_id" id="id" value="{{ chauffeur.id }}">
                        {{ form_widget(deleteForm._token) }}
                
                        <div class="form-group">
                            <label for="eventId">Sélectionnez un événement</label>
                            <select name="eventId" id="eventId" class="form-control">
                                {% for event in events %}
                                <option value="{{ event.id }}">{{ event.titre }}</option>
                                {% endfor %}
                            </select>
                        </div>
                
                        <div class="form-group">
                            {{ form_row(deleteForm.valider) }}
                        </div> 
                        {{ form_end(deleteForm, {'render_rest': false}) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

	

    <div id="vehicules">
        <h2>Véhicules</h2>
        {% if chauffeur.vehicule|length > 0 %}
        <div class="vehicules-container">
            {% for vehicule in chauffeur.vehicule %}
            <div class="vehicule-card">
                <div class="vehicule-image-container">
                    <img src="{{ vehicule.image ? asset('uploads/vehiculePics/' ~ vehicule.image) : asset('images/chauffeurs/caravatar.png') }}" alt="{{ vehicule.nom }}" id="vehicule-image-{{vehicule.id}}" class="vehicule-image">
                </div>
            
                <div class="vehicule-info" id="vehicule-info-{{ vehicule.id }}">
                    <h3>{{ vehicule.nom }}</h3>
                    <p>Marque: {{ vehicule.marque }}</p>
                    <p>Catégorie: {{ vehicule.categorie }}</p>
                    <p>Nombre de places: {{ vehicule.nbPlace }}</p>
                </div>
    
                <form action="{{ path('app_chauffeur_delete_vehicule', {'id': chauffeur.id}) }}" method="post" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer le véhicule ?');">
                    <input type="hidden" name="vehicule_id" value="{{ vehicule.id }}">
                    <input type="hidden" name="_csrf_token" value="{{ csrf_token('vehicule_delete') }}">
                    <button type="submit" class="btn">Supprimer le vehicule</button>
                </form>
                
            </div>
            {% endfor %}
        </div>
    
        <button class="btn" onclick="addVehicule(event)" id="vehicule-add">Ajouter un vehicule</button>
        <div id="vehicule-form-add" class="vehicule-form-add">
            {{ form_start(addVehiculeForm, {'action': path('app_chauffeur_add_vehicule', {'id': chauffeur.id}), 'method': 'post', 'attr': {'enctype': 'multipart/form-data'}}) }}
                {{form_widget(addVehiculeForm._token)}}
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.nom)}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.marque)}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.categorie, {'id': 'vehicule_categorie'})}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.nbPlace,  {'id': 'nbPlace'})}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.image)}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.valider)}}
                </div>
            {{form_end(addVehiculeForm, {'render_rest': false})}}
        </div>
    
        {% else %}
        <div class="vehicules-container empty-container">
            <div class="vehicule-card empty-card">
                <p>Aucun véhicule associé à ce chauffeur.</p>
            </div>
        </div>
    
        <button class="btn" onclick="addVehicule(event)" id="vehicule-add">Ajouter un vehicule</button>
        <div id="vehicule-form-add" class="vehicule-form-add">
            {{ form_start(addVehiculeForm, {'action': path('app_chauffeur_add_vehicule', {'id': chauffeur.id}), 'method': 'post', 'attr': {'enctype': 'multipart/form-data'}}) }}
                {{form_widget(addVehiculeForm._token)}}
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.nom)}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.marque)}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.categorie, {'attr': {'id': 'vehicule_categorie'}})}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.nbPlace, {'attr': {'id': 'nbPlace'}})}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.image)}}
                </div>
                <div class="form-group vehicule-form">
                    {{form_row(addVehiculeForm.valider)}}
                </div>
            {{form_end(addVehiculeForm, {'render_rest': false})}}
        </div>
        {% endif %}
    </div>

{% endblock %}
{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>

    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', () => {
            const calendarEl = document.getElementById('calendar-holder');

            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                editable: true,
                selectable: true,
                eventSources: [
                    {
                        url: "{{ path('fc_load_events', {'id': chauffeur.id}) }}",
                        method: 'POST',
                        extraParams: {
                            filters: JSON.stringify({})
                        },
                        failure: () => {
                            alert('Erreur lors du chargement des événements.');
                        },
                    },
                ],
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay',
                },
                timeZone: 'UTC',
                select: function(info) {
                    let titre = prompt("Entrez un titre pour votre événement:");
                    if (titre) {
                        calendar.addEvent({
                            title: titre,
                            start: info.start,
                            end: info.end,
                            allDay: info.allDay
                        });
                    }
                    calendar.unselect();
                },
            });

            calendar.render();

            const vehiculeSelect = document.getElementById('vehicule_categorie');
            const nbPassagerSelect = document.getElementById('nbPlace');

            const nbPassagers = {
                'Van': [1, 2, 3, 4, 5, 6, 7],
                'Berline': [1, 2, 3, 4],
                'Default': [1, 2, 3, 4, 5, 6, 7],
            };

            if (vehiculeSelect) {
                vehiculeSelect.addEventListener('change', function() {
                    const vehicule = vehiculeSelect.value;
                    // Clear the current passenger options
                    nbPassagerSelect.innerHTML = '';
                    // Get the passenger options based on the selected vehicle type
                    const options = nbPassagers[vehicule] || nbPassagers['Default'];
                    // Populate the passenger select with new options
                    options.forEach(function(option) {
                        const opt = document.createElement('option');
                        opt.value = option;
                        opt.textContent = option;
                        nbPassagerSelect.appendChild(opt);
                    });
                });
            }

            const showCalendarBtn = document.getElementById('showCalendar');
            const block = document.getElementById('popup_modal');
            const closeBtn = document.getElementById('close-btn');

            showCalendarBtn.addEventListener('click', function() {
                block.style.display = 'block';
                calendar.updateSize(); // Recalcule les dimensions du calendrier
            });

            closeBtn.addEventListener('click', function() {
                block.style.display = 'none';
            });

            // Fermer le modal en cliquant en dehors du contenu
            window.addEventListener('click', function(event) {
                if (event.target === block) {
                    block.style.display = 'none';
                }
            });
        });


    function toggleAddEvent() {
        var modalForm = document.getElementById('modal-form');
        var eventBlock = document.getElementById('AddEventPlanning');
        var editEventBlock = document.getElementById('EditEventPlanning');
        var deleteEventBlock = document.getElementById('deleteEventPlanning');
        var addEventBtn = document.getElementById('add-event-btn');
        var editEventBtn = document.getElementById('edit-event-btn');
        var deleteEventBtn = document.getElementById('delete-event-btn');
        
        // Masquer les autres formulaires
        editEventBlock.style.display = 'none';
        deleteEventBlock.style.display = 'none';
        
        // Réinitialiser le texte des autres boutons
        editEventBtn.textContent = 'Modifier une date';
        deleteEventBtn.textContent = 'Supprimer une date';
        
        // Gérer l'affichage du formulaire Ajouter une date
        if (eventBlock.style.display === 'none' || eventBlock.style.display === '') {
            eventBlock.style.display = 'block';
            modalForm.style.display = 'block';  // Afficher le modal-form
            addEventBtn.textContent = 'Annuler';
        } else {
            eventBlock.style.display = 'none';
            addEventBtn.textContent = 'Ajouter une date';
            // Si aucun formulaire n'est visible, masquer le modal-form
            if (editEventBlock.style.display === 'none' && deleteEventBlock.style.display === 'none') {
                modalForm.style.display = 'none';
            }
        }
    }
    
    function toggleDeleteEvent() {
        var modalForm = document.getElementById('modal-form');
        var eventBlock = document.getElementById('deleteEventPlanning');
        var addEventBlock = document.getElementById('AddEventPlanning');
        var editEventBlock = document.getElementById('EditEventPlanning');
        var deleteEventBtn = document.getElementById('delete-event-btn');
        var addEventBtn = document.getElementById('add-event-btn');
        var editEventBtn = document.getElementById('edit-event-btn');
        
        // Masquer les autres formulaires
        addEventBlock.style.display = 'none';
        editEventBlock.style.display = 'none';
        
        // Réinitialiser le texte des autres boutons
        addEventBtn.textContent = 'Ajouter une date';
        editEventBtn.textContent = 'Modifier une date';
        
        // Gérer l'affichage du formulaire Supprimer une date
        if (eventBlock.style.display === 'none' || eventBlock.style.display === '') {
            eventBlock.style.display = 'block';
            modalForm.style.display = 'block';  // Afficher le modal-form
            deleteEventBtn.textContent = 'Annuler';
        } else {
            eventBlock.style.display = 'none';
            deleteEventBtn.textContent = 'Supprimer une date';
            // Si aucun formulaire n'est visible, masquer le modal-form
            if (addEventBlock.style.display === 'none' && editEventBlock.style.display === 'none') {
                modalForm.style.display = 'none';
            }
        }
    }
    
    function toggleEditEvent() {
        var modalForm = document.getElementById('modal-form');
        var eventBlock = document.getElementById('EditEventPlanning');
        var addEventBlock = document.getElementById('AddEventPlanning');
        var deleteEventBlock = document.getElementById('deleteEventPlanning');
        var editEventBtn = document.getElementById('edit-event-btn');
        var addEventBtn = document.getElementById('add-event-btn');
        var deleteEventBtn = document.getElementById('delete-event-btn');
        
        // Masquer les autres formulaires
        addEventBlock.style.display = 'none';
        deleteEventBlock.style.display = 'none';
        
        // Réinitialiser le texte des autres boutons
        addEventBtn.textContent = 'Ajouter une date';
        deleteEventBtn.textContent = 'Supprimer une date';
        
        // Gérer l'affichage du formulaire Modifier une date
        if (eventBlock.style.display === 'none' || eventBlock.style.display === '') {
            eventBlock.style.display = 'block';
            modalForm.style.display = 'block';  // Afficher le modal-form
            editEventBtn.textContent = 'Annuler';
        } else {
            eventBlock.style.display = 'none';
            editEventBtn.textContent = 'Modifier la date';
            // Si aucun formulaire n'est visible, masquer le modal-form
            if (addEventBlock.style.display === 'none' && deleteEventBlock.style.display === 'none') {
                modalForm.style.display = 'none';
            }
        }
    }
    
function addVehicule(event) {
    event.preventDefault();
    var vehiculeAddBtn = document.getElementById('vehicule-add');
    var formContainer = document.getElementById('vehicule-form-add');
    if (formContainer.classList.contains('show')) {
        formContainer.classList.remove('show');
        setTimeout(() => {
            formContainer.style.display = 'none';
        }, 500); // Match this duration with the CSS transition duration
        vehiculeAddBtn.textContent = 'Ajouter un vehicule';
    } else {
        formContainer.style.display = 'block';
        setTimeout(() => {
            formContainer.classList.add('show');
        }, 10); // Small delay to ensure the display change is registered
        vehiculeAddBtn.textContent = 'Annuler';
    }
}

 // Fonction pour ouvrir la boîte de dialogue de sélection d'image
 function triggerImageSelection() {
    document.getElementById('profileImage').click();
}

// Fonction pour prévisualiser l'image sélectionnée
function previewImage(event) {
    var reader = new FileReader();

    reader.onload = function() {
        var output = document.getElementById('profileImagePreview');
        output.src = reader.result;
        document.getElementById('changeImageBtn').textContent = 'Valider';
        document.getElementById('changeImageBtn').onclick = submitImageForm;
        document.getElementById('cancelChangeBtn').style.display = 'inline-block';
        document.getElementById('chooseAnotherBtn').style.display = 'inline-block';
    }

    reader.readAsDataURL(event.target.files[0]);
}

// Fonction pour soumettre le formulaire contenant l'image
function submitImageForm() {
    document.getElementById('profileImageForm').submit();
}

// Fonction pour annuler la sélection de l'image
function cancelImageSelection() {
    var output = document.getElementById('profileImagePreview');
    output.src = "{{ chauffeur.image ? asset('uploads/profilePics/' ~ chauffeur.image) : asset('images/default-avatar-icon-of-social-media-user-vector.jpg') }}";
    document.getElementById('changeImageBtn').textContent = 'Changer l\'image du Profile';
    document.getElementById('changeImageBtn').onclick = triggerImageSelection;
    document.getElementById('cancelChangeBtn').style.display = 'none';
    document.getElementById('chooseAnotherBtn').style.display = 'none';
    document.getElementById('profileImage').value = ''; // Reset le champ file
}


// Fonction pour soumettre le formulaire contenant l'image
function submitImageForm() {
    document.getElementById('profileImageForm').submit();
}

function editProfileInfo() {
    const editableElements = [
        document.getElementById('nom'),
        document.getElementById('prenom'),
        document.getElementById('email'),
        document.getElementById('dateNaissance'),
    ];

    editableElements.forEach(element => {
        if (element) {
            element.contentEditable = true;
            element.style.backgroundColor = 'white';
            element.style.border = '1px solid #ccc';
            element.style.padding = '1px';
            element.style.borderRadius = '3px';
        }
    });

    // Ajouter un sélecteur pour le sexe
    const sexeSpan = document.getElementById('sexe');
    const sexeOptions = ['Masculin', 'Feminin'];
    const sexeSelect = document.createElement('select');
    sexeSelect.id = 'sexeSelect';
    sexeOptions.forEach(option => {
        const opt = document.createElement('option');
        opt.value = option;
        opt.textContent = option;
        sexeSelect.appendChild(opt);
    });
    sexeSelect.value = sexeSpan.textContent.trim();
    sexeSpan.replaceWith(sexeSelect);

    const profileDetails = document.getElementById('profile-details');
    if (!document.getElementById('annuler-btn')) {
        const cancelButton = document.createElement('button');
        cancelButton.id = 'annuler-btn';
        cancelButton.className = 'btn';
        cancelButton.textContent = 'Annuler';
        cancelButton.style.marginRight = '10px';  
        cancelButton.onclick = cancelEdit;

        const validateButton = document.createElement('button');
        validateButton.id = 'valider-btn';
        validateButton.className = 'btn';
        validateButton.textContent = 'Valider';
        validateButton.onclick = validateEdit;

        const modifyButton = document.getElementById('modifier-btn');
        modifyButton.style.display = 'none';
        
        profileDetails.appendChild(cancelButton);
        profileDetails.appendChild(validateButton);
    }

    document.getElementById('modifier-btn').disabled = true;
}

function cancelEdit() {
    window.location.reload();
}

// Fonction pour valider les modifications
function validateEdit() {
    const updatedDetails = {
        nom: document.getElementById('nom').textContent.trim(),
        prenom: document.getElementById('prenom').textContent.trim(),
        email: document.getElementById('email').textContent.trim(),
        dateNaissance: document.getElementById('dateNaissance').textContent.trim(),
        sexe: document.getElementById('sexeSelect').value,
    };
    
    // Regex email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(updatedDetails.email)) {
        alert("Veuillez entrer un email valide.");
        return;
    }

    // Validation de l'âge (18 ans minimum)
    const dateParts = updatedDetails.dateNaissance.split('/');
    if (dateParts.length === 3) {
        const day = dateParts[0];
        const month = dateParts[1];
        const year = dateParts[2];
        
        // Conversion au format YYYY-MM-DD pour la BDD
        const birthDateForDb = `${year}-${month}-${day}`;
        updatedDetails.dateNaissance = birthDateForDb;
        
        // Calcul de l'âge pour la validation
        const birthDate = new Date(birthDateForDb);
        const today = new Date();
        let age = today.getFullYear() - birthDate.getFullYear();
        const m = today.getMonth() - birthDate.getMonth();
    
    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }// Ajuste l'âge si l'anniversaire n'est pas encore passé cette année
    // Si le mois actuel est inférieur au mois de naissance, ou
    // si on est dans le même mois mais que le jour actuel est inférieur au jour de naissance,
    // alors on soustrait 1 à l'âge calculé
        if (age < 18) {
            alert("Vous devez avoir au moins 18 ans.");
            return;
        }
    } else {
        alert("Format de date invalide. Veuillez entrer la date au format JJ/MM/YYYY.");
        return;
    }

    const form = document.createElement('form');
    form.method = 'POST';
    form.action = "{{ path('app_chauffeur_profile_edit', {'id': chauffeur.id}) }}";

    for (const [nom, valeur] of Object.entries(updatedDetails)) {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = nom;
        input.value = valeur;
        form.appendChild(input);
    }
    
    const csrfTokenInput = document.createElement('input');
        csrfTokenInput.type = 'hidden';
        csrfTokenInput.name = '_csrf_token';
        csrfTokenInput.value = "{{ csrf_token('profile_edit') }}";
        form.appendChild(csrfTokenInput);

        document.body.appendChild(form);
        form.submit();
}
</script>
{% endblock %}
